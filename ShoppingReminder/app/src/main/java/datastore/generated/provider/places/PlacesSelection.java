/**
 *  This class was generated by Android-contentprovider-generator software
 *       (https://github.com/BoD/android-contentprovider-generator)
 */
package datastore.generated.provider.places;

import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;

import datastore.generated.provider.base.AbstractSelection;

/**
 * Selection for the {@code places} table.
 */
public class PlacesSelection extends AbstractSelection<PlacesSelection> {
    @Override
    protected Uri baseUri() {
        return PlacesColumns.CONTENT_URI;
    }

    /**
     * Query the given content resolver using this selection.
     *
     * @param contentResolver The content resolver to query.
     * @param projection A list of which columns to return. Passing null will return all columns, which is inefficient.
     * @param sortOrder How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort
     *            order, which may be unordered.
     * @return A {@code PlacesCursor} object, which is positioned before the first entry, or null.
     */
    public PlacesCursor query(ContentResolver contentResolver, String[] projection, String sortOrder) {
        Cursor cursor = contentResolver.query(uri(), projection, sel(), args(), sortOrder);
        if (cursor == null) return null;
        return new PlacesCursor(cursor);
    }

    /**
     * Equivalent of calling {@code query(contentResolver, projection, null)}.
     */
    public PlacesCursor query(ContentResolver contentResolver, String[] projection) {
        return query(contentResolver, projection, null);
    }

    /**
     * Equivalent of calling {@code query(contentResolver, projection, null, null)}.
     */
    public PlacesCursor query(ContentResolver contentResolver) {
        return query(contentResolver, null, null);
    }


    public PlacesSelection id(long... value) {
        addEquals("places." + PlacesColumns._ID, toObjectArray(value));
        return this;
    }

    public PlacesSelection name(String... value) {
        addEquals(PlacesColumns.NAME, value);
        return this;
    }

    public PlacesSelection nameNot(String... value) {
        addNotEquals(PlacesColumns.NAME, value);
        return this;
    }

    public PlacesSelection nameLike(String... value) {
        addLike(PlacesColumns.NAME, value);
        return this;
    }

    public PlacesSelection nameContains(String... value) {
        addContains(PlacesColumns.NAME, value);
        return this;
    }

    public PlacesSelection nameStartsWith(String... value) {
        addStartsWith(PlacesColumns.NAME, value);
        return this;
    }

    public PlacesSelection nameEndsWith(String... value) {
        addEndsWith(PlacesColumns.NAME, value);
        return this;
    }

    public PlacesSelection latitude(double... value) {
        addEquals(PlacesColumns.LATITUDE, toObjectArray(value));
        return this;
    }

    public PlacesSelection latitudeNot(double... value) {
        addNotEquals(PlacesColumns.LATITUDE, toObjectArray(value));
        return this;
    }

    public PlacesSelection latitudeGt(double value) {
        addGreaterThan(PlacesColumns.LATITUDE, value);
        return this;
    }

    public PlacesSelection latitudeGtEq(double value) {
        addGreaterThanOrEquals(PlacesColumns.LATITUDE, value);
        return this;
    }

    public PlacesSelection latitudeLt(double value) {
        addLessThan(PlacesColumns.LATITUDE, value);
        return this;
    }

    public PlacesSelection latitudeLtEq(double value) {
        addLessThanOrEquals(PlacesColumns.LATITUDE, value);
        return this;
    }

    public PlacesSelection longitude(double... value) {
        addEquals(PlacesColumns.LONGITUDE, toObjectArray(value));
        return this;
    }

    public PlacesSelection longitudeNot(double... value) {
        addNotEquals(PlacesColumns.LONGITUDE, toObjectArray(value));
        return this;
    }

    public PlacesSelection longitudeGt(double value) {
        addGreaterThan(PlacesColumns.LONGITUDE, value);
        return this;
    }

    public PlacesSelection longitudeGtEq(double value) {
        addGreaterThanOrEquals(PlacesColumns.LONGITUDE, value);
        return this;
    }

    public PlacesSelection longitudeLt(double value) {
        addLessThan(PlacesColumns.LONGITUDE, value);
        return this;
    }

    public PlacesSelection longitudeLtEq(double value) {
        addLessThanOrEquals(PlacesColumns.LONGITUDE, value);
        return this;
    }
}
